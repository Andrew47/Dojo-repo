lung.dt = data.table(lung)
lung.dt[status == 1]$time
lung.dt[status == 1]
lung.dt[status == 1,]
lung.dt
str(lung.dt)
subset(lung, status == 1)
subset(lung, status == 1)$time
min(subset(lung, status == 1)$time)
min(subset(lung, status == 2)$time)
summary(km.as.one)
km.as.one$surv
km.as.one$n.event
summary(km.as.one, censored = T)
km.as.one
summary(km.as.one, times = 1:100, censored = T)
summary(km.as.one, censored = T)
km.as.one
summary(km.as.one, times = 1200, censored = T)
summary(km.as.one, times = 100, censored = T)
plot(km.as.sex)
km.by.sex <- survfit(SurvObj ~ sex, data = lung, conf.type = "log-log")
plot(km.as.sex)
plot(km.by.sex)
summary(km.as.one, times = 100, censored = T)
summary(km.as.one, times = c(10:11000/10), censored = T)
plot(km.by.sex)
par(mfrow=c(1,2))
plot(km.as.one)
plot(km.by.sex)
par(mfrow=c(1,2))
plot(km.as.one, main = "survival rate")
plot(km.by.sex, main = "survival rate by sex")
km.by.age <- survfit(SurvObj ~ age, data = lung, conf.type = "log-log")
plot(km.by.age, main = "survival rate")
lung$age
smmary(lung)
summary(lung)
lung$age.detail <- cut(lung$age, breaks = c(-Inf, 56, 63, 69, Inf))
km.by.age <- survfit(SurvObj ~ age.detail, data = lung, conf.type = "log-log")
plot(km.by.age, main = "survival rate by sex")
par(mfrow=c(1,1))
plot(km.by.age, main = "survival rate by sex")
km.as.one
km.by.sex
km.by.age
km.by.sex
km.as.one
summary(lung)
lung$SurvObj
km.as.one
Vignette(survival)
vignette(survival)
vignette("survival")
km.as.one.sex1 <- survfit(SurvObj ~ 1, data = lung[lung$sex == 1, ], conf.type = "log-log")
km.as.one.sex1
km.by.sex
km.as.one
summary(km.as.one, censored = T)
summary(lung)
km.as.one
n.risk <- 219
Dt <- 228 - 219
sun <- Dt/(n.risk*(n.risk - Dt))
sun
sun <- sqrt(Dt/(n.risk*(n.risk - Dt)) )
sun
summary(km.as.one, censored = T)
St <- 0.9561
Se <- St *sun
Se
summary(km.as.one, times = 30, censored = T)
Se
St - Se
St + Se
summary(km.as.one, times = 30, censored = T)
St - 1.96 *Se
St + 1.96 *Se
summary(km.as.one, censored = T)
lung$time
summary(km.as.one, censored = T)
tt <- summary(km.as.one, censored = T)
plot(tt$n ~ tt$std.err)
tt$n
plot(tt$time ~ tt$std.err)
plot(tt$std.err~tt$time)
shiny::runApp('C:/YCR Perso/Caroline-project/doc/test')
jscolorInput <- function(id, default) {
tagList(
singleton(tags$head(tags$script(src = "www/ss-jscolor.js"))),
singleton(tags$head(tags$script(src = "www/jscolor/jscolor.js"))),
singleton(tags$head(tags$link(rel = "stylsheet", type = "text/css", href = "CSS/cerulean.css"))),
tags$input(id = id, value = default, class = "color shiny-bound-input", type = "text", onchange = sprintf("$('#%s').trigger('afterChange')",id)),
tags$script(sprintf("$('#%s').trigger('afterChange')",id))
)
}
#
#
# # This function generates the client-side HTML for a URL input
# ColorInput <- function(inputId) {
#   tagList(
#     # This makes web page load the JS file in the HTML head.
#     # The call to singleton ensures it's only included once
#     # in a page.
#     shiny::singleton(
#       shiny::tags$head(
#         shiny::tags$script(src = "jscolor.js")
#       )
#     ),
#    # shiny::tags$label(label, 'for'' = inputId),
#     shiny::tags$input(id = inputId
#                       , class = "color {slider:false, displayColorCode: false}"
#                       , type = "button"
#                       , value = as.character(value) )
#   )
# }
#
# #
# # registerInputHandler("jscooler.colorInput", function(data, ...) {
# #   if (is.null(data))
# #     NULL
# #   else
# #     data
# # })
#
#
#
#
#
# # # Send an update message to a URL input on the client.
# # # This update message can change the value and/or label.
# # updateUrlInput <- function(session, inputId,
# #                            label = NULL, value = NULL) {
# #
# #   message <- dropNulls(list(label = label, value = value))
# #   session$sendInputMessage(inputId, message)
# # }
# #
# #
# # # Given a vector or list, drop all the NULL items in it
# # dropNulls <- function(x) {
# #   x[!vapply(x, is.null, FUN.VALUE=logical(1))]
# # }
# #
# #
# # ColorInput <-  function(inputId) {
# #     leftChoices <- lapply(leftChoices, tags$option)
# #     rightChoices <- lapply(rightChoices, tags$option)
# #     if (multiple)
# #     multiple <- "multiple"
# #     else
# #     multiple <- NULL
# #     tagList(
# #     singleton(tags$head(
# #       tags$script(src = "www/jscolor.js"),
# #         tags$style(type="text/css",
# #             HTML(".chooser-container { display: inline-block; }")
# #             )
# #         )
# #     ),
# #     div(id=inputId, class="chooser",
# #         div(class="chooser-container chooser-left-container",
# #             tags$select(class="left", size=size, multiple=multiple, leftChoices)
# #             ),
# #         div(class="chooser-container chooser-center-container",
# #             icon("arrow-circle-o-right", "right-arrow fa-3x"),
# #             tags$br(),
# #             icon("arrow-circle-o-left", "left-arrow fa-3x")
# #             ),
# #         div(class="chooser-container chooser-right-container",
# #             tags$select(class="right", size=size, multiple=multiple, rightChoices)
# #             )
# #         )
# #     )
# # }
# #
#
#
#
#
# #
# # chooserInput <- function(inputId, leftLabel, rightLabel, leftChoices, rightChoices,
# #                          size = 5, multiple = FALSE) {
# #   leftChoices <- lapply(leftChoices, tags$option)
# #   rightChoices <- lapply(rightChoices, tags$option)
# #   if (multiple)
# #     multiple <- "multiple"
# #   else
# #     multiple <- NULL
# #   tagList(
# #     singleton(tags$head(
# #       tags$script(src="chooser-binding.js"),
# #       tags$style(type="text/css",
# #                  HTML(".chooser-container { display: inline-block; }")
# #       )
# #     )),
# #     div(id=inputId, class="chooser",
# #         div(class="chooser-container chooser-left-container",
# #             tags$select(class="left", size=size, multiple=multiple, leftChoices)
# #         ),
# #         div(class="chooser-container chooser-center-container",
# #             icon("arrow-circle-o-right", "right-arrow fa-3x"),
# #             tags$br(),
# #             icon("arrow-circle-o-left", "left-arrow fa-3x")
# #         ),
# #         div(class="chooser-container chooser-right-container",
# #             tags$select(class="right", size=size, multiple=multiple, rightChoices)
# #         )
# #     )
# #   )
# # }
#
# # registerInputHandler("shinyjsexamples.chooser", function(data, ...) {
# #   if (is.null(data))
# #     NULL
# #   else
# #     list(left=as.character(data$left), right=as.character(data$right))
# #
shiny::runApp('C:/YCR Perso/Caroline-project/doc/test')
install.packages("dlm")
install.packages("dlm")
library(dlm)
str(ToothGrowth)
fit <- lm(len~dose + supp,data=ToothGrowth)
fit2 <- lm(len~dose*supp,data=ToothGrowth)
fit
fit2
cat("\014")
shiny::runApp('~/GitHub/alstar/Analysis-with-Programming/2013/R/Explore-ARIMA-2-2-2-subclass-family-on-Shiny')
install.packages("installr") # install
installr::updateR() # updating R.
g <- getPlot(ggpairs(data.dt ),1, 1 )
#install.packages("R.matlab")
library(R.matlab)
library(data.table)
library(GGally)
library(ggplot2)
path <- "C:/YCR pro/R/log - binomial/"
tt <- readMat(paste0(path, "data.mat")
data <- data.frame(tt[1])
data.dt <- data.table(data)
head(data)
## Je considere la premiere colonne comme le score SOFA
#  la seconde comme le deces, avec 1 = deces, 0 = non deces
# premier overview
g <- getPlot(ggpairs(data.dt ),1, 1 )
ggsave(paste0(path, "ggally croos plot.png"), g)
g <- getPlot(ggpairs(data.dt ),1, 2)
g <- getPlot(ggpairs(data.dt ),1, 8)
g <- getPlot(ggpairs(data.dt ),9 , 9)
g <- getPlot(ggpairs(data), 9, 9)
g <- getPlot(ggpairs(data), 9, 9)
g <- getPlot(ggpairs(data), 9, 10)
u <- ggpairs(data)
u <- ggpairs(data.dt )
ncol(data)
data <- data.frame(tt[1], stringAsFactors = F)
data <- data.frame(tt[1], stringAsFactors = F)
tt <- readMat(paste0(path, "data.mat"))
data <- data.frame(tt[1], stringAsFactors = F)
data.dt <- data.table(data)
g <- getPlot(ggpairs(data.dt ), 1, 1)
ggsave(paste0(path, "ggally croos plot.png"), g)
g <- getPlot(ggpairs(data.dt ), 1:9, 1)
g <- getPlot(ggpairs(data.dt ), 1:9, 1:9)
ggpairs(data.dt[, list(A.1, A.2)]
)
x11("cross between a1 and a2")
x11("cross between a1 and a2.png")
ggpairs(data.dt[, list(A.1, A.2)])
dev.off()
# premier overview
x11(paste0(path, "cross between a1 and a2.png"))
ggpairs(data.dt[, list(A.1, A.2)])
dev.off()
# premier overview
x11(7, 7, 1)
ggpairs(data.dt[, list(A.1, A.2)])
dev.off()
# association entre le score SOFA et le deces:
res1 <- summary(data.dt[A.2 == 1, ])
res0 <- summary(data.dt[A.2 == 1, ])
res1
res0
res1 <- summary(data.dt[A.2 == 1, ])
res0 <- summary(data.dt[A.2 == 0, ])
res1
res0
x11(7, 7, 1)
ggpairs(data.dt[, list(A.1, A.3)])
dev.off()
ggpairs(data.dt[, list(A.1, A.3)])
cor(data.dt)
cor <- cor(data.dt[, A.1], data.dt[, A.3])
cor
cor(data.dt[, A.1], data.dt[, A.2])
cor(data.dt[, A.1], data.dt[, A.3])
cor(data.dt[, A.1], data.dt[, A.4])
cor(data.dt[, A.1], data.dt[, A.5])
cor(data.dt[, A.1], data.dt[, A.6])
cor(data.dt[, A.1], data.dt[, A.7])
cor(data.dt[, A.1], data.dt[, A.8])
cor(data.dt[, A.1], data.dt[, A.9])
glm(formula = A.2 ~ A.3 * A.1 , family = binomial(link = log), data = data)
glm(formula = A.3 * A.1 ~ A.2, family = binomial(link = log), data = data)
table(data.dt[, A.2])
glm(formula = A.2 ~ A.3 * A.1, family = binomial(link = log), data = data)
table(data.dt[, A.2], data.dt[, A.3])
glm(formula = A.2 ~ A.3 + A.1, family = binomial(link = log), data = data)
glm(formula = A.2 ~ A.3 , family = binomial(link = log), data = data)
glm(formula = A.2 ~ A.1 , family = binomial(link = log), data = data)
glm(formula = A.2 ~ A.3 , family = binomial(link = log), data = data)
glm(formula = A.2 ~ A.4 , family = binomial(link = log), data = data)
glm(formula = A.2 ~ A.4 + A.1 + A.5 , family = binomial(link = log), data = data)
glm(formula = A.2 ~ A.4 + A.1 + A.5 , family = binomial(link = log), data = data, start = 1)
glm(formula = A.2 ~ A.4 + A.1, family = binomial(link = log), data = data, start = 1)
glm(formula = A.2 ~ A.4 + A.1, family = binomial(link = log), data = data, start = c(-1, 1, 0))
res.glm <- glm(formula = A.2 ~ A.4 + A.1, family = binomial(link = log), data = data, start = c(-1, 1, 0))
table(data.dt[, A.1], data.dt[, A.3])
res.glm <- glm(formula = A.2 ~ A.4 + as.numeric(A.1), family = binomial(link = log), data = data
, start = c(-1, 1, 0))
res.glm <- glm(formula = A.2 ~ A.4 + as.numeric(A.1), family = binomial(link = log), data = data
, start = c(-1, 1))
res.glm <- glm(formula = A.2 ~ A.4 + A.1, family = binomial(link = log), data = data
, start = c(-1))
res.glm <- glm(formula = A.2 ~ A.4 , family = binomial(link = log), data = data
, start = c(-1))
res.glm <- glm(formula = A.2 ~ A.4 , family = binomial(link = log), data = data ))
res.glm <- glm(formula = A.2 ~ A.4 , family = binomial(link = log), data = data )
res.glm
res.glm <- glm(formula = A.2 ~ A.4 + A.3 , family = binomial(link = log), data = data
, start = c(-1, 1))
res.glm <- glm(formula = A.2 ~ A.4 + A.3 , family = binomial(link = log), data = data
, start = c(1, 1))
res.glm <- glm(formula = A.2 ~ A.4 + A.3 , family = binomial(link = log), data = data
, start = c(1, 1, 1))
res.glm <- glm(formula = A.2 ~ A.4 + A.3 , family = binomial(link = log), data = data
, start = c(1, 1, 1))
res.glm <- glm(formula = A.2 ~ A.4 + A.3 , family = binomial(link = log), data = data
, start = c(0, 0, 0))
data$A.2.2 <- as.factor(data$A.2)
data$A.3.2 <- as.factor(data$A.3)
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = log), data = data.dt
, start = c(0, 0, 0))
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = log), data = data
)
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = log), data = data
, start = c(0, 0, 0))
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = log), data = data
, start = rep(1, 3))
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = "logit"), data = data
, start = rep(1, 3))
res.glm
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = "logit"), data = data)
res.glm
res.glm <- glm(formula = A.2.2 ~ -1 + A.1 + A.3.2 , family = binomial(link = "logit"), data = data)
res.glm
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = "logit"), data = data)
res.glm
confint(res.glm)
table(data.dt[, A.2], data.dt[, A.3])
res1 <- summary(data.dt[A.2 == 1, ])
res0 <- summary(data.dt[A.2 == 0, ])
res1
res0
data <- data.frame(tt[1], stringsAsFactors = F)
data.dt <- data.table(data)
# association entre le score SOFA et le deces:
res1 <- summary(data.dt[A.2 == 1, ])
res0 <- summary(data.dt[A.2 == 0, ])
cor(data.dt[, A.1], data.dt[, A.2])
cor(data.dt[, A.1], data.dt[, A.3])
cor(data.dt[, A.1], data.dt[, A.4])
cor(data.dt[, A.1], data.dt[, A.5])
cor(data.dt[, A.1], data.dt[, A.6])
cor(data.dt[, A.1], data.dt[, A.7])
cor(data.dt[, A.1], data.dt[, A.8])
cor(data.dt[, A.1], data.dt[, A.9])
data$A.2.2 <- as.factor(data$A.2)
data$A.3.2 <- as.factor(data$A.3)
res.glm.mult <- glm(formula = A.2.2 ~ A.1 * A.3.2 , family = binomial(link = "logit"), data = data)
res.glm.mult
res.glm
ic.glm <- confint(res.glm)
data.dt[, A.2.2 := as.factor(A.2)]
data.dt[, A.3.2 := as.factor(A.3)]
res.glm.mult <- glm(formula = A.2.2 ~ A.1 * A.3.2 , family = binomial(link = "logit"), data = data.dt)
res.glm <- glm(formula = A.2.2 ~ A.1 + A.3.2 , family = binomial(link = "logit"), data = data.dt)
ic.glm <- confint(res.glm)
res.glm.mult
res.glm
ic.glm
ic.glm.mult <- confint(res.glm.mult)
ic.glm.mult
install.packages("R2PTT")
devtools::install_github("cran/R2PPT")
library(R2PTT)
library(R2PPT)
myPres<-PPT.Init(visible=TRUE)
install.packages("rcom")
install.packages("RDCOMClient")
library(R2PPT)
myPres<-PPT.Init(visible=TRUE)
install.packages("R2PPT")
install.packages("R2PPT")
library(R2PPT)
myPres<-PPT.Init(visible=TRUE)
myPres<-PPT.Init()
install.packages("rcom")
install.packages("R2PPT")
install.packages("R2PPT")
library(R2PPT)
myPres<-PPT.Init()
install.packages("RDCOMClient")
install.packages("rcom")
devtools::install_github("cran/rcom")
install.packages("devtools")
install.packages("RDCOMClient")
install.packages("rcom")
devtools::install_github("cran/rcom")
library(R2PPT)
myPres<-PPT.Init()
library(RDCOMClient)
library(rcom)
install.packages("rcom")
library(R2PPT)
PPT.Open(file = "C:/YCR pro/R/R2PPT/Fact Pack intro v1.8.pptx", method = "RDCOMClient")
tt <- PPT.Open(file = "C:/YCR pro/R/R2PPT/Fact Pack intro v1.8.pptx", method = "RDCOMClient")
tt <- PPT.Open(file = "C:/YCR pro/R/R2PPT/Fact Pack intro v1.8.ppt", method = "RDCOMClient")
tt<-PPT.AddTitleOnlySlide(tt,title="Carry on appending to existing PPT file!")
tt <- PPT.Open(file = "C:/YCR pro/R/R2PPT/Fact Pack intro v1.8.ppt", method = "RDCOMClient")
tt <- PPT.Open(file = "C:/YCR pro/R/R2PPT/Fact Pack intro v1.8.ppt", method = "rcom")
library(R2PPT)
install.packages(c("rscproxy", "rcom"), repos = "http://rcom.univie.ac.at/download", lib = .Library)
install.packages("RDCOMClient", repos = "http://www.omegahat.org/R")
options(install.packages.check.source = "no")
install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library,type="win.binary")
# options(install.packages.check.source = "no")
# install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library,type="win.binary")
# library(rcom)
# comRegisterRegistry()
# install.packages(c("Rcmdr","RcmdrPlugin.HH"),lib=.Library,dep=TRUE)
# install.packages("R2PPT")
library(R2PPT)
## to be use: r 3.1.0
path <- "C:/YCR pro/R/R2PPT/"
myPres <- PPT.Init(method="RDCOMClient")
myPres <- PPT.AddTitleOnlySlide(myPres,title="Test Automation PPT",title.fontsize=40,title.font="Arial")
### For PowerPoint 2007 should be something like:
myPres <- PPT.ApplyTemplate(myPres,file=paste0(path, "Template3.potx"))
list.graph <- list.files(path = paste0(path, "plot"))
list.graph.png <- list.graph[substr(list.graph, nchar(list.graph)-2, nchar(list.graph)) == "png"]
for (i in list.graph.png){ # i <- "Product_mix_monthly_comparison20150601.png"
myPres <- PPT.AddTitleSlide(myPres,title=substr(i,1, nchar(i)-4)
,subtitle="Subtitle here")
myPres <- PPT.AddGraphicstoSlide(myPres, file = paste0(path, "plot/", i)
, size = c(200, 105, 600, 380), dev.out.type = "png")
}
ret <- PPT.SaveAs(myPres, paste0(path, "try1", format(Sys.time(), "%Y%m%d %H:%M:%S.ppt") )  )
# options(install.packages.check.source = "no")
# install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library,type="win.binary")
# library(rcom)
# comRegisterRegistry()
# install.packages(c("Rcmdr","RcmdrPlugin.HH"),lib=.Library,dep=TRUE)
# install.packages("R2PPT")
library(R2PPT)
## to be use: r 3.1.0
path <- "C:/YCR pro/R/R2PPT/"
myPres <- PPT.Init(method="RDCOMClient")
myPres <- PPT.AddTitleOnlySlide(myPres,title="Test Automation PPT",title.fontsize=40,title.font="Arial")
### For PowerPoint 2007 should be something like:
myPres <- PPT.ApplyTemplate(myPres,file=paste0(path, "Template3.potx"))
list.graph <- list.files(path = paste0(path, "plot"))
list.graph.png <- list.graph[substr(list.graph, nchar(list.graph)-2, nchar(list.graph)) == "png"]
for (i in list.graph.png){ # i <- "Product_mix_monthly_comparison20150601.png"
myPres <- PPT.AddTitleSlide(myPres,title=substr(i,1, nchar(i)-4)
,subtitle="Subtitle here")
myPres <- PPT.AddGraphicstoSlide(myPres, file = paste0(path, "plot/", i)
, size = c(200, 105, 600, 380), dev.out.type = "png")
}
ret <- PPT.SaveAs(myPres, paste0(path, "try1", format(Sys.time(), "%Y%m%d %H:%M:%S.pptx") )  )
ret <- PPT.SaveAs(myPres, paste0(path, "try1", format(Sys.time(), "%Y%m%d %H:%M:%S.pptx") )  )
library(R2PPT)
path <- "C:/YCR pro/R/R2PPT/"
myPres <- PPT.Init(method="RDCOMClient")
myPres <- PPT.AddTitleOnlySlide(myPres,title="Test Automation PPT",title.fontsize=40,title.font="Arial")
myPres <- PPT.ApplyTemplate(myPres,file=paste0(path, "Template3.potx"))
list.graph <- list.files(path = paste0(path, "plot"))
list.graph.png <- list.graph[substr(list.graph, nchar(list.graph)-2, nchar(list.graph)) == "png"]
i <- "Product_mix_monthly_comparison20150601.png"
myPres <- PPT.AddTitleSlide(myPres,title=substr(i,1, nchar(i)-4)
,subtitle="Subtitle here")
myPres <- PPT.AddGraphicstoSlide(myPres, file = paste0(path, "plot/", i)
, size = c(200, 105, 600, 380), dev.out.type = "png")
ret <- PPT.SaveAs(myPres, paste0(path, "try1", format(Sys.time(), "%Y%m%d %H:%M:%S.pptx") ) )
path
library(R2PPT)
library(R.matlab)
library(data.table)
library(ggplot2)
path <- "C:/YCR pro/R/log - binomial/"
install.packages(c("R.matlab", "data.table", "ggplot2"))
install.packages(c("R.matlab", "data.table", "ggplot2"))
library(R.matlab)
library(data.table)
library(ggplot2)
path <- "C:/YCR pro/R/log - binomial/"
tt <- readMat(paste0(path, "data.mat"))
data <- data.frame(tt[1], stringsAsFactors = F)
data.dt <- data.table(data)
install.packages("glmnet")
library(glmnet)
